#!/usr/bin/env node

/// <reference path="./typings/main.d.ts" />
var plugins = {
    path: require("path"),
    beautylog: require("beautylog"),
    indentString: require("indent-string"),
    g: {
        wavethrough: require("gulp-wavethrough"),
    },
    through: require("through2")
};
var doNothing = function () {
};
module.exports = function (activateArg) {
    if (activateArg === void 0) { activateArg = true; }
    if (activateArg == true) {
        return plugins.through.obj(function (file, enc, cb) {
            //do some string calculating
            var localFile = {
                contents: String(file.contents)
            };
            localFile.contents = plugins.indentString(localFile.contents, ' ', 2);
            localFile.contents = plugins.indentString(localFile.contents, '>'.red, 2);
            localFile.contents = '\n'.concat(localFile.contents);
            //form console output
            plugins.beautylog.info("file in your pipeline:");
            console.log("|| ".blue + "File.contents: ".yellow + localFile.contents.bold);
            console.log("|| ".blue + "File.path: ".yellow + String(file.path).bold.blue);
            console.log("|| ".blue + "File.base: ".yellow + String(file.base).bold.blue);
            console.log("|| ".blue + "File.relative: ".yellow + String(file.relative).bold.blue);
            console.log("|| ".blue + "File.data: ".yellow + String(JSON.stringify(file.data)).bold.blue);
            return cb(null, file); //run callback function to signal end of plugin process.
        });
    }
    else if (activateArg == false) {
        return plugins.g.wavethrough(); //wave through
    }
    else {
        plugins.beautylog.error("gulp-inspect: please provide a valid boolean value as argument");
        return plugins.g.wavethrough(); //wave through
    }
};

//# sourceMappingURL=data:application/json;base64,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bEQsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ0osT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsZ0VBQWdFLENBQUMsQ0FBQztRQUMxRixNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDLGNBQWM7SUFDbEQsQ0FBQztBQUNMLENBQUMsQ0FBQyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL3R5cGluZ3MvbWFpbi5kLnRzXCIgLz5cbnZhciBwbHVnaW5zID0ge1xuICAgIHBhdGg6IHJlcXVpcmUoXCJwYXRoXCIpLFxuICAgIGJlYXV0eWxvZzogcmVxdWlyZShcImJlYXV0eWxvZ1wiKSxcbiAgICBpbmRlbnRTdHJpbmc6IHJlcXVpcmUoXCJpbmRlbnQtc3RyaW5nXCIpLFxuICAgIGc6IHtcbiAgICAgICAgd2F2ZXRocm91Z2g6IHJlcXVpcmUoXCJndWxwLXdhdmV0aHJvdWdoXCIpLFxuICAgIH0sXG4gICAgdGhyb3VnaDogcmVxdWlyZShcInRocm91Z2gyXCIpXG59XG5cbnZhciBkb05vdGhpbmcgPSBmdW5jdGlvbigpe1xuXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IChhY3RpdmF0ZUFyZzpib29sZWFuID0gdHJ1ZSkgPT4ge1xuICAgIGlmIChhY3RpdmF0ZUFyZyA9PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBwbHVnaW5zLnRocm91Z2gub2JqKChmaWxlLCBlbmMsIGNiKSA9PiB7XG4gICAgICAgICAgICAvL2RvIHNvbWUgc3RyaW5nIGNhbGN1bGF0aW5nXG4gICAgICAgICAgICB2YXIgbG9jYWxGaWxlID0ge1xuICAgICAgICAgICAgICAgIGNvbnRlbnRzOiBTdHJpbmcoZmlsZS5jb250ZW50cylcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBsb2NhbEZpbGUuY29udGVudHMgPSBwbHVnaW5zLmluZGVudFN0cmluZyhsb2NhbEZpbGUuY29udGVudHMsICcgJywgMik7XG4gICAgICAgICAgICBsb2NhbEZpbGUuY29udGVudHMgPSBwbHVnaW5zLmluZGVudFN0cmluZyhsb2NhbEZpbGUuY29udGVudHMsICc+Jy5yZWQsIDIpO1xuICAgICAgICAgICAgbG9jYWxGaWxlLmNvbnRlbnRzID0gJ1xcbicuY29uY2F0KGxvY2FsRmlsZS5jb250ZW50cyk7XG5cbiAgICAgICAgICAgIC8vZm9ybSBjb25zb2xlIG91dHB1dFxuICAgICAgICAgICAgcGx1Z2lucy5iZWF1dHlsb2cuaW5mbyhcImZpbGUgaW4geW91ciBwaXBlbGluZTpcIilcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwifHwgXCIuYmx1ZSArIFwiRmlsZS5jb250ZW50czogXCIueWVsbG93ICsgbG9jYWxGaWxlLmNvbnRlbnRzLmJvbGQpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJ8fCBcIi5ibHVlICsgXCJGaWxlLnBhdGg6IFwiLnllbGxvdyArIFN0cmluZyhmaWxlLnBhdGgpLmJvbGQuYmx1ZSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInx8IFwiLmJsdWUgKyBcIkZpbGUuYmFzZTogXCIueWVsbG93ICsgU3RyaW5nKGZpbGUuYmFzZSkuYm9sZC5ibHVlKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwifHwgXCIuYmx1ZSArIFwiRmlsZS5yZWxhdGl2ZTogXCIueWVsbG93ICsgU3RyaW5nKGZpbGUucmVsYXRpdmUpLmJvbGQuYmx1ZSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInx8IFwiLmJsdWUgKyBcIkZpbGUuZGF0YTogXCIueWVsbG93ICsgU3RyaW5nKEpTT04uc3RyaW5naWZ5KGZpbGUuZGF0YSkpLmJvbGQuYmx1ZSk7XG4gICAgICAgICAgICByZXR1cm4gY2IobnVsbCwgZmlsZSk7IC8vcnVuIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIHNpZ25hbCBlbmQgb2YgcGx1Z2luIHByb2Nlc3MuXG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAoYWN0aXZhdGVBcmcgPT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIHBsdWdpbnMuZy53YXZldGhyb3VnaCgpOyAvL3dhdmUgdGhyb3VnaFxuICAgIH0gZWxzZSB7XG4gICAgICAgIHBsdWdpbnMuYmVhdXR5bG9nLmVycm9yKFwiZ3VscC1pbnNwZWN0OiBwbGVhc2UgcHJvdmlkZSBhIHZhbGlkIGJvb2xlYW4gdmFsdWUgYXMgYXJndW1lbnRcIik7XG4gICAgICAgIHJldHVybiBwbHVnaW5zLmcud2F2ZXRocm91Z2goKTsgLy93YXZlIHRocm91Z2hcbiAgICB9XG59O1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
